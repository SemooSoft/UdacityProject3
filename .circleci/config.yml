version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environments:
    description: Destroy backend and frontend cloudformation stacks .
    parameters:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert database migration.
    steps:
      - restore_cache:
          keys: [backend-modules]
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            SUCCESS=$(curl https://kvdb.io/Lma7SCSvsHo6Cnf1weNFWx/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${KVDB_ACCESS_TOKEN})
            [[ $SUCCESS == 1 ]] || (exit 0) 
            npm install                
            npm run migrations:revert

  notify-slack:
    description: notify slack
    steps:
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          working_directory: ./frontend
          command: |
            npm run test
  
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          working_directory: ./backend
          command: |
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-end audit
          working_directory: ./frontend
          command: |
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical 

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          working_directory: ./backend
          command: |
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.09.1
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances                                            \
              --query 'Reservations[*].Instances[*].PublicIpAddress'              \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environments
      - notify-slack
      
  configure-infrastructure:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:a1:e0:c0:10:e5:11:7a:eb:ba:be:93:81:b4:cc:3c"]
      - attach_workspace:
          at: .
      - run:
          name: install pip3
          command: |
            sudo apt update 
            sudo apt install python3-pip -y
            pip3 install --upgrade pip
      - run:
          name: Install ansible
          command: |
            pip3 install ansible 
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - notify-slack

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - restore_cache:
          keys: [backend-dist]
      - attach_workspace:
          at: .
      - run:
          name: Install dependency
          command: |
            sudo apt update -y
            sudo apt upgrade -y
            sudo apt update -y
            sudo apt install python3-pip -y
            pip3 install --upgrade pip
      - run:
          name: install awscli
          command: |
            pip3 install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run migrations | tee -a migrations_output.txt  
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
            grep "has been executed successfully" migrations_output.txt || (exit 1)                         
            curl https://kvdb.io/Lma7SCSvsHo6Cnf1weNFWx/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${KVDB_ACCESS_TOKEN} -d '1'

      - destroy-environments
      - revert-migrations
      - notify-slack


  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install python pip 
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install python3-pip -y
            pip3 install --upgrade pip
      - run:
          name: install aws
          command: |
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances                          \
                --query 'Reservations[*].Instances[*].PublicIpAddress'              \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
      - persist_to_workspace:
          root: .
          paths:
            - frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Get S3 url resulting from frontend deployment
          command: |
            aws cloudformation --region ${AWS_DEFAULT_REGION} describe-stacks   \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"       \
              --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
              --output text
      - run:
          name: Empty s3 bucket.  
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environments          
      - revert-migrations
      - notify-slack

  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:a1:e0:c0:10:e5:11:7a:eb:ba:be:93:81:b4:cc:3c"]
      - attach_workspace:
          at: .
      - run:
          name: install pip
          command: |
            sudo apt update 
            sudo apt upgrade -y
            sudo apt install python3-pip -y
            pip3 install --upgrade pip
      - run:
          name: install awscli
          command: |
            pip3 install awscli
      - run:
          name: install ansible
          command: |
            pip3 install ansible
      - run:
          name: Backend final build.
          working_directory: .
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            sudo tar -czvf mybackend.tar.gz backend/
            
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            echo "Contents  of the inventory.txt file are -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: Empty s3 bucket.
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environments
      - revert-migrations
      - notify-slack
  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install pip
          command: |
            sudo apt update 
            sudo apt upgrade -y
            sudo apt install python3-pip -y
            pip3 install --upgrade pip
      - run:
          name: install awscli
          command: |
            pip3 install awscli
      - run:
          name: backend smoke-test
          working_directory: ./frontend
          command: |
            source .env
            echo "${API_URL}"
            curl "${API_URL}/api/status" | grep "ok" || (exit 1)

      - run:
          name: Frontend smoke test
          command: |
            curl -s "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees" | grep "Welcome"  || (exit 1)
      - run:
          name: Empty s3 bucket.
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environments
      - revert-migrations
      - notify-slack

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Empty s3 bucket.
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environments
      - revert-migrations
      - notify-slack
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/textfile.txt   
            cat ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
      - notify-slack

  clean_up_old:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: final cleanup on success
          command: |
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName"       \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            echo S3LIST names: "${S3LIST[@]}"

            for i in `seq 0 1 10`
            do
              export s3=$(aws s3api list-buckets --query "Buckets[$i].Name")
              echo ${s3}
              if [[ ${s3} != udapeople-${CIRCLE_WORKFLOW_ID:0:7} ]] || [[ ${s3} != null ]]
              then
                aws s3 rm s3://${s3} --recursive
              else
                echo "nothing to cleanup"
              fi
            done

            for st in "${STACKS[@]}"
            do
              if [[ "${st}" != "frontend-${CIRCLE_WORKFLOW_ID:0:7}" ]] || [[ "${st}" != "backend-${CIRCLE_WORKFLOW_ID:0:7}" ]] || [[ "${st}" != "InitialStack-${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                aws cloudformation delete-stack --stack-name "${st}"
              else
                echo "nothing to cleanup"
              fi
            done
      - notify-slack  

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - deploy-frontend:
      #     requires: [run-migrations]      
      # - smoke-test:
      #    requires: [deploy-frontend,deploy-backend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - get_last_deployment_id:
      #     requires: [cloudfront-update]
       - clean_up_old
      #     requires: [cloudfront-update]
      